@startuml
title MachineManagementSystem

namespace SQL-Datenbankstruktur{

class Vorgesetzter << (T,orchid) >> {
    + <u>VorgesetzterID : int</u>
    VorgesetzterName : string
    VorgesetzterVorname : string
}

class Facharbeiter << (T,orchid) >> {
    + <u>FacharbeiterID : int</u>
    FacharbeiterName : string
    FacharbeiterVorname : string
}

class Maschine << (T,orchid) >> {
    + <u>MaschinenID : int</u>
    MaschinenName : string
    Material : string
    MaschinenStatus : bool
    <color:royalBlue>Auftragsnummer : int</color>
}

class Auftraege << (T,orchid) >> {
    + <u>AuftragsID : int</u>
    Beschreibung : string
    <color:royalBlue>MaschinenID : int</color>
    Material : string
    Abgabe : DateTime
    Beginn : DateTime
    Dauer : int
}

class AufgabenZuweisen << (T,orchid) >> {
    + <u>AuftragsID : int</u>
    <color:royalBlue>FacharbeiterID : string</color>
    <color:royalBlue>VorgesetzterID : int</color>
    Eintrag : int
}

class Lehrgang << (T,orchid) >> {
    + <u>LehrgangID : int</u>
    LehrgangName : string
}

class LehrgangZuweisung << (T,orchid) >> {
    <color:royalBlue>LehrgangID : int</color>
    <color:royalBlue>FacharbeiterID : string</color>
    EintragLehrgang : int
}


}

namespace MMSLib{
namespace MMSLib.Model{

class DBConnect{
    + Facharbeiter : <DBSet<Facharbeiter>
    + Vorgesetzter : <DBSet<Vorgesetzter>
    + LehrgangZuweisung : <DBSet<LehrgangZuweisung>
    + Lehrgang : <DBSet<Lehrgang>
    + Auftraege : <DBSet<Auftraege>
    + AufgabenZuweisen : <DBSet<AufgabenZuweisen>
    + Maschine : <DBSet<Maschine>
}

class Vorgesetzter{
    + VorgesetzterID : int
    + VorgesetzterName : string
    + VorgesetzterVorname : string
}

class Facharbeiter{
    + FacharbeiterID : int
    + FacharbeiterName : string
    + FacharbeiterVorname : string
}


class Maschine{
    + MaschinenID : int
    + MaschinenName : string
    + Material : string
    + MaschinenStatus : bool
    + Auftragsnummer : int?
}

class Auftraege{
    + AuftragsID : int
    + Beschreibung : string
    + MaschinenID : int
    + Material : string
    + Abgabe : DateTime
    + Beginn : DateTime
    + Dauer : int
}

class AufgabenZuweisen{
    + AuftragsID : int
    + FacharbeiterID : string
    + VorgesetzterID : int
    + Eintrag : int
}

class Lehrgang{
    + LehrgangID : int
    + LehrgangName : string
}

class LehrgangZuweisung{
    + LehrgangID : int
    + FacharbeiterID : string
    + EintragLehrgang : int
}


DBConnect --o Vorgesetzter : verwendet
DBConnect --o Facharbeiter : verwendet
DBConnect --o Maschine : verwendet
DBConnect --o Auftraege : verwendet
DBConnect --o AufgabenZuweisen : verwendet
DBConnect --o Lehrgang : verwendet
DBConnect --o LehrgangZuweisung : verwendet
}

namespace MMSLib.Klassen {

 class AuftragAnzeigen {
        - _context : DBConnect
        + Async : LoadAufträgeForFacharbeiter
    }
    
AuftragAnzeigen --> DBConnect : verwendet

class AbgabeCompare {
    - _context : DBConnect
    + AbgabeCompare(context : DBConnect)
    + Async : LoescheAbgelaufeneAuftraege() : Task
    }

AbgabeCompare --> DBConnect : verwendet

class AuftragBearbeiten {
    - _context : DBConnect
    + GetAuftraegeMitFacharbeitern(): List<dynamic>
    + Async : AuftragLeoeschen()
    }

AbgabeCompare --> DBConnect : verwendet
    
class MaschinenÜberschneidung {
    -_context : DBConnect
    +MaschinenÜberschneidung(context: DBConnect)
    +IstMaschineVerfuegbar : Task<bool>
    }
    
MaschinenÜberschneidung --> DBConnect : verwendet


class NächstesDatum {
    -_context : DBConnect
    +NaechstesDatum(context: DBConnect)
    +FindeNächstesVerfügbaresZeitfenster(): Task<DateTime?>
}

NächstesDatum --> DBConnect : verwendet


class AuftragAnlegen{
    + VorgesetzterID : int
    + VorgesetzterName : string
    + VorgesetzterVorname : string
    }
}
}
}


}